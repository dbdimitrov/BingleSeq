stringsAsFactors = FALSE)  %>%
mutate(cell = gsub('\\.', '-', cell))%>%
## We create a data frame with the Viper score per cell and its clusters
viper_scores_clusters <- viper_scores_df  %>%
data.frame() %>%
rownames_to_column("cell") %>%
mutate(cell = gsub('\\.', '-', cell))%>%
gather(tf, activity, -cell) %>%
inner_join(CellsClusters, by="cell")
## We create a data frame containing the cells and their clusters
CellsClusters <- data.frame(cell = names(Idents(pbmc)),
cell_type = as.character(Idents(pbmc)),
stringsAsFactors = FALSE)  %>%
mutate(rownames = gsub('\\.', '-', rownames))
View(CellsClusters)
## We create a data frame containing the cells and their clusters
CellsClusters <- data.frame(cell = names(Idents(pbmc)),
cell_type = as.character(Idents(pbmc)),
stringsAsFactors = FALSE)  %>%
mutate(cell = gsub('\\.', '-', cell))
## We create a data frame with the Viper score per cell and its clusters
viper_scores_clusters <- viper_scores_df  %>%
data.frame() %>%
rownames_to_column("cell") %>%
mutate(cell = gsub('\\.', '-', cell))%>%
gather(tf, activity, -cell) %>%
inner_join(CellsClusters, by="cell")
## We summarize the Viper scores by cellpopulation
summarized_viper_scores <- viper_scores_clusters %>%
group_by(tf, cell_type) %>%
summarise(avg = mean(activity),
std = sd(activity))
## We select the 20 most variable TFs. (20*9 populations = 180)
highly_variable_tfs <- summarized_viper_scores %>%
group_by(tf) %>%
mutate(var = var(avg))  %>%
ungroup() %>%
top_n(180, var) %>%
distinct(tf)
## We prepare the data for the plot
summarized_viper_scores_df <- summarized_viper_scores %>%
semi_join(highly_variable_tfs, by = "tf") %>%
dplyr::select(-std) %>%
spread(tf, avg) %>%
data.frame(row.names = 1, check.names = FALSE, stringsAsFactors = FALSE)
palette_length = 100
my_color = colorRampPalette(c("Darkblue", "white","red"))(palette_length)
my_breaks <- c(seq(min(summarized_viper_scores_df), 0,
length.out=ceiling(palette_length/2) + 1),
seq(max(summarized_viper_scores_df)/palette_length,
max(summarized_viper_scores_df),
length.out=floor(palette_length/2)))
viper_hmap <- pheatmap(t(summarized_viper_scores_df),fontsize=14,
fontsize_row = 10,
color=my_color, breaks = my_breaks,
main = "DoRothEA (ABC)", angle_col = 45,
treeheight_col = 0,  border_color = NA)
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
readRDS("~/Downloads/SeuratObj_20-10-09_19-36.Robj")
s_object <- readRDS("~/Downloads/SeuratObj_20-10-09_19-36.Robj")
assays(s_object)
Assays(s_object)
## We read Dorothea Regulons for Human:
dorothea_regulon_human <- get(data("dorothea_hs", package = "dorothea"))
## We obtain the regulons based on interactions with confidence level A, B and C
regulon <- dorothea_regulon_human %>%
dplyr::filter(confidence %in% c("A","B","C"))
Assays(s_object)
## We compute the Nearest Neighbours to perform cluster
DefaultAssay(object = s_object) <- "dorothea"
## We read Dorothea Regulons for Human:
dorothea_regulon_human <- get(data("dorothea_hs", package = "dorothea"))
## We obtain the regulons based on interactions with confidence level A, B and C
regulon <- dorothea_regulon_human %>%
dplyr::filter(confidence %in% c("A","B","C"))
## We compute Viper Scores
pbmc <- run_viper(pbmc, regulon,
options = list(method = "scale", minsize = 4,
eset.filter = FALSE, cores = 1,
verbose = FALSE))
## We compute Viper Scores
s_object <- run_viper(s_object, regulon,
options = list(method = "scale", minsize = 4,
eset.filter = FALSE, cores = 1,
verbose = FALSE))
Assays(s_object)
## We compute Viper Scores
s_object <- run_viper(s_object, regulon,
options = list(method = "scale", minsize = 5,
eset.filter = FALSE, cores = 1,
verbose = FALSE))
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
#' Generate a Volcano plot
#'
#' @param deres Differential Expression results (deTable)
#' @param pValue P-value threshold
#' @param fcValue Fold-Change threshold
#' @export
#' @return Returns a Volcano plot
plotVP <- function(deres, fcValue, pValue) {
deres <- na.omit(deres) %>%
rownames_to_column("gene")
deres$sig_flag <-
as.factor(deres$FDR < pValue & abs(deres$logFC) > log2(fcValue))
print(deres$sig_flag)
VP <-
ggplot(data = deres, aes(x = logFC, y = -log10(Pvalue), colour = sig_flag)) +
geom_point(aes(text=gene), size = 1.6) +
xlab("Log2 Fold Change") +
ylab("-log10 unajusted p-value") +
theme_classic(base_size = 18) +
theme(legend.position = "bottom",
legend.title = element_blank()) +
scale_colour_discrete(
breaks = c("Significant", "Non-significant"),
)
VP <- ggplotly(VP, tooltip = c("gene", "x", "y"))
return(VP)
}
deres <- read.csv("~/PhD/test_data/de_results_deseq.csv")
plotVP(deres, 1.5, 0.05)
#' Generate a Volcano plot
#'
#' @param deres Differential Expression results (deTable)
#' @param pValue P-value threshold
#' @param fcValue Fold-Change threshold
#' @export
#' @return Returns a Volcano plot
plotVP <- function(deres, fcValue, pValue) {
deres <- na.omit(deres) %>%
rownames_to_column("gene")
deres <- deres %>%
mutate(sig_flag = as.factor(deres$FDR < pValue & abs(deres$logFC) > log2(fcValue)))
VP <-
ggplot(data = deres, aes(x = logFC, y = -log10(Pvalue), colour = sig_flag)) +
geom_point(aes(text=gene), size = 1.6) +
xlab("Log2 Fold Change") +
ylab("-log10 unajusted p-value") +
theme_classic(base_size = 18) +
theme(legend.position = "bottom", legend.title = element_blank()) +
scale_colour_discrete(
breaks = c("TRUE", "FALSE"),
labels = c("Significant", "Non-significant")
)
VP <- ggplotly(VP, tooltip = c("gene", "x", "y"))
return(VP)
}
deres <- read.csv("~/PhD/test_data/de_results_deseq.csv")
#' Generate a Volcano plot
#'
#' @param deres Differential Expression results (deTable)
#' @param pValue P-value threshold
#' @param fcValue Fold-Change threshold
#' @export
#' @return Returns a Volcano plot
plotVP <- function(deres, fcValue, pValue) {
deres <- na.omit(deres) %>%
rownames_to_column("gene")
deres <- deres %>%
mutate(sig_flag = as.factor(deres$FDR < pValue &
abs(deres$logFC) > log2(fcValue))) %>%
mutate(Species = fct_recode(Species,
"TRUE" = "Significant",
"FALSE" = "Non-significant"
))
VP <-
ggplot(data = deres, aes(x = logFC, y = -log10(Pvalue), colour = sig_flag)) +
geom_point(aes(text=gene), size = 1.6) +
xlab("Log2 Fold Change") +
ylab("-log10 unajusted p-value") +
theme_classic(base_size = 18) +
theme(legend.position = "bottom", legend.title = element_blank()) +
scale_colour_discrete(
breaks = c("TRUE", "FALSE"),
labels = c("Significant", "Non-significant")
)
VP <- ggplotly(VP, tooltip = c("gene", "x", "y"))
return(VP)
}
deres <- read.csv("~/PhD/test_data/de_results_deseq.csv")
plotVP(deres, 1.5, 0.05)
#' Generate a Volcano plot
#'
#' @param deres Differential Expression results (deTable)
#' @param pValue P-value threshold
#' @param fcValue Fold-Change threshold
#' @export
#' @return Returns a Volcano plot
plotVP <- function(deres, fcValue, pValue) {
deres <- na.omit(deres) %>%
rownames_to_column("gene")
deres <- deres %>%
mutate(sig_flag = as.factor(deres$FDR < pValue &
abs(deres$logFC) > log2(fcValue))) %>%
mutate(sig_flag = fct_recode(sig_flag,
"TRUE" = "Significant",
"FALSE" = "Non-significant"
))
VP <-
ggplot(data = deres, aes(x = logFC, y = -log10(Pvalue), colour = sig_flag)) +
geom_point(aes(text=gene), size = 1.6) +
xlab("Log2 Fold Change") +
ylab("-log10 unajusted p-value") +
theme_classic(base_size = 18) +
theme(legend.position = "bottom", legend.title = element_blank()) +
scale_colour_discrete(
breaks = c("TRUE", "FALSE"),
labels = c("Significant", "Non-significant")
)
VP <- ggplotly(VP, tooltip = c("gene", "x", "y"))
return(VP)
}
deres <- read.csv("~/PhD/test_data/de_results_deseq.csv")
plotVP(deres, 1.5, 0.05)
#' Generate a Volcano plot
#'
#' @param deres Differential Expression results (deTable)
#' @param pValue P-value threshold
#' @param fcValue Fold-Change threshold
#' @export
#' @return Returns a Volcano plot
plotVP <- function(deres, fcValue, pValue) {
deres <- na.omit(deres) %>%
rownames_to_column("gene")
deres <- deres %>%
mutate(sig_flag = as.factor(deres$FDR < pValue &
abs(deres$logFC) > log2(fcValue))) %>%
mutate(sig_flag = fct_recode(sig_flag,
"TRUE" = "Significant",
"FALSE" = "Non-significant"
))
print(deres$sig_flag)
VP <-
ggplot(data = deres, aes(x = logFC, y = -log10(Pvalue), colour = sig_flag)) +
geom_point(aes(text=gene), size = 1.6) +
xlab("Log2 Fold Change") +
ylab("-log10 unajusted p-value") +
theme_classic(base_size = 18) +
theme(legend.position = "bottom", legend.title = element_blank()) +
scale_colour_discrete(
breaks = c("TRUE", "FALSE"),
labels = c("Significant", "Non-significant")
)
VP <- ggplotly(VP, tooltip = c("gene", "x", "y"))
return(VP)
}
deres <- read.csv("~/PhD/test_data/de_results_deseq.csv")
plotVP(deres, 1.5, 0.05)
#' Generate a Volcano plot
#'
#' @param deres Differential Expression results (deTable)
#' @param pValue P-value threshold
#' @param fcValue Fold-Change threshold
#' @export
#' @return Returns a Volcano plot
plotVP <- function(deres, fcValue, pValue) {
deres <- na.omit(deres) %>%
rownames_to_column("gene")
deres <- deres %>%
mutate(sig_flag = as.factor(deres$FDR < pValue &
abs(deres$logFC) > log2(fcValue))) %>%
mutate(sig_flag = fct_recode(sig_flag,
"Significant" = "TRUE",
"Non-significant" = "FALSE"
))
print(deres$sig_flag)
VP <-
ggplot(data = deres, aes(x = logFC, y = -log10(Pvalue), colour = sig_flag)) +
geom_point(aes(text=gene), size = 1.6) +
xlab("Log2 Fold Change") +
ylab("-log10 unajusted p-value") +
theme_classic(base_size = 18) +
theme(legend.position = "bottom", legend.title = element_blank()) +
scale_colour_discrete(
breaks = c("TRUE", "FALSE"),
labels = c("Significant", "Non-significant")
)
VP <- ggplotly(VP, tooltip = c("gene", "x", "y"))
return(VP)
}
deres <- read.csv("~/PhD/test_data/de_results_deseq.csv")
plotVP(deres, 1.5, 0.05)
#' Generate an MA plot
#'
#' @param deres Differential Expression results (deTable)
#' @param pValue P-value threshold
#' @param fcValue Fold-Change threshold
#' @export
#' @return Returns a MA plot
plotMA <- function(deres,
fcValue,
pValue) {
deres <- na.omit(deres) %>%
rownames_to_column("gene")
exprValues <- deres[, 6:ncol(deres)]
deres <- deres %>%
mutate(sig_flag = as.factor(deres$FDR < pValue &
abs(deres$logFC) > log2(fcValue))) %>%
mutate(sig_flag = fct_recode(sig_flag,
"Significant" = "TRUE",
"Non-significant" = "FALSE"
)) %>%
mutate(mean_expression =
rowMeans(exprValues, na.rm = FALSE, dims = 1) + 0.000001)
## Generate a MA plot
MA <-
ggplot(data = deres, aes(
x = log10(mean_expression),
y = logFC,
colour = deres$sig_flag
)) +
geom_point(aes(text=gene), size = 1.6) +
geom_hline(aes(yintercept = 0), colour = "black", size = 0.75) +
xlab("Log2 Mean Expression") +
ylab("Log2 Fold Change") +
theme_classic(base_size = 18) +
theme(legend.position = "bottom", legend.title = element_blank()) +
scale_colour_discrete(
breaks = c("TRUE", "FALSE"),
labels = c("Significant", "Non-significant")
)
MA <- ggplotly(MA, tooltip = c("gene", "x", "y"))
return(MA)
}
plotMA(deres, 1.5, 0.05)
#' Generate an MA plot
#'
#' @param deres Differential Expression results (deTable)
#' @param pValue P-value threshold
#' @param fcValue Fold-Change threshold
#' @export
#' @return Returns a MA plot
plotMA <- function(deres,
fcValue,
pValue) {
deres <- na.omit(deres) %>%
rownames_to_column("gene")
exprValues <- deres[, 6:ncol(deres)]
deres <- deres %>%
mutate(sig_flag = as.factor(deres$FDR < pValue &
abs(deres$logFC) > log2(fcValue))) %>%
mutate(sig_flag = fct_recode(sig_flag,
"Significant" = "TRUE",
"Non-significant" = "FALSE"
)) %>%
mutate(mean_expression =
rowMeans(exprValues, na.rm = FALSE, dims = 1) + 0.000001)
## Generate a MA plot
MA <-
ggplot(data = deres, aes(
x = log10(mean_expression),
y = logFC,
colour = deres$sig_flag
)) +
geom_point(aes(text=gene), size = 1.6) +
geom_hline(aes(yintercept = 0), colour = "black", size = 1) +
xlab("Log2 Mean Expression") +
ylab("Log2 Fold Change") +
theme_classic(base_size = 18) +
theme(legend.position = "bottom") +
scale_colour_discrete(
breaks = c("TRUE", "FALSE"),
labels = c("Significant", "Non-significant")
)
MA <- ggplotly(MA, tooltip = c("gene", "x", "y"))
return(MA)
}
plotMA(deres, 1.5, 0.05)
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
sessionInfo()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
?RidgePlot
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
install.packages(org.Dr.eg.db)
BiocManager::install(org.Dr.eg.db)
BiocManager::install("org.Dr.eg.db")
BiocManager::install("org.Dm.eg.db")
devtools::load_all(".")
BiocManager::install("org.EcK12.eg.db")
devtools::load_all(".")
devtools::load_all(".")
sessionInfo()
devtools::load_all(".")
sessionInfo()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
?DGEList
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
sessioninfo::session_info()
waiter::waiter_use()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
sessionInfo()
?FindAllMarkers
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
BiocManager::available("wald")
BiocManager::available("WALD")
BiocManager::available("MAST")
BiocManager::version("MAST")
BiocManager::install("MAST")
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
sessioninfo::session_info()
devtools::load_all(".")
sessioninfo::session_info()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
sessionInfo()
sessioninfo::sessionInfo
sessioninfo::session_info()
sessionInfo()
?sessionInfo()
pander(sessionInfo())
library(pander)
devtools::session_info()
## R Session Info:
devtools::session_info()
sessioninfo::session_info()%>%
details::details(
summary = 'Current session info',
open    = TRUE
)
sessioninfo::session_info()%>%
details::details(
summary = 'Current session info',
open    = TRUE
)
sessioninfo::session_info()
clipr::write_clip(session_info())
clipr::write_clip(session_info())
ssession_info()
session_info()
sessioninfo::session_info()
sessionInfo()
sessioninfo::session_info()
sessionInfo()
sessionInfo()
sessionInfo()
